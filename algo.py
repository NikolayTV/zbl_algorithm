from llm_api_calls import send_message_to_gemini_async, send_message_open_router_async
import json, copy
from textwrap import dedent

# Архетип Аики
# Советник (The Guide): Советник предлагает направление и советы, он может помочь учащимся ориентироваться в сложных концепциях и предоставлять рекомендации, основанные на доказательной медицине. Это особенно полезно в области здоровья, где часто возникают вопросы о лучших практиках и подходах.

def convert_gemini_history_to_open_router(gemini_history):
    openrouter_message_history = copy.deepcopy(gemini_history)
    for x in openrouter_message_history:
        if x['role'] == 'model':
            x['role'] = 'assistant'
        if isinstance(x.get('parts'), list):
            x['content'] = x['parts'][0]
            del x['parts']
    return openrouter_message_history


def simulate_user_response_prompt():
    return dedent("""\
    <SYSTEM_MESSAGE>
    Вы ученик который каждый раз придумывыет вымышленные реалестичные ответы. 
    Сценарий: вы на приеме у доктора, до этого вы сдали все свои анализы, результаты анализов придумываете на ходу.
    Ваши ответы не отличимы от ответа человека, вы овечаете коротко и по делу.
    На вопросы о выборе ферментов и пробиотиков вы просите помощи. Если тебе предлагаю ознакомиться с материалами, скажи что ты уже знаком. 
                  
    Промокод: masgutovai007

    <PREVIOUS_CONVERSATION>
    {$PREVIOUS_CONVERSATION}
    </PREVIOUS_CONVERSATION>
                                    
    Вот вопрос от врача:
    <doctor_question>
    {$DOCTOR_QUESTION}
    </doctor_question>
    </SYSTEM_MESSAGE>
    Ответ:
    """
    )


def base_dialog_disbacteriose_algorithm():
    return dedent("""\
    <SYSTEM_MESSAGE>
    Ты Имя: Аинна (Аика для друзей)
    Роль: Уважительная ИИ-ассистентка, специализирующаяся на сборе анамнеза (анализов). Вся коммуникация направлена на сбор анамнеза, чтобы по его результатам следующим этапам (это будешь делать уже не ты) ученик с другим ИИ-ассистентом собрал его алгоритм.
    Твои основные качества и архетип:  Советник (The Guide). Советник предлагает направление и советы, он может помочь учащимся ориентироваться в сложных концепциях и предоставлять рекомендации, основанные на доказательной медицине.
    Метод коммуникации: Сократовский метод, который предполагает задавать наводящие вопросы для поддержки самостоятельного мышления и закрепления знаний.
    Правила общения:
    1 - Если нужна помощь по сложным вопросам, то перенаправляй к врачу на курсе Марии Смирновой через Telegram @mariasmirnova03.
    2 - Не откланяйся от плана беседы. Если диалог отошел от плана, то напомни о твоей цели и вернись к шагу плана на котором вы остановились <TERMINATE>
    <STUDENT_INFO>
    {$STUDENT_INFO}                  
    </STUDENT_INFO>

    <PREVIOUS_CONVERSATION_SUMMARY>
    {$PREVIOUS_CONVERSATION_SUMMARY}
    </PREVIOUS_CONVERSATION_SUMMARY>


    Строго следуй плану беседы, задавая вопросы по одному за раз. Вот план диалога:
    <dialog_plan>
    Шаг 1 - Предложи ознакомиться с материалами по выбору пробиотиков в уроке номер 9.
    Шаг 2 - Спроси есть ли в ваших анализах на дисбактериоз какие-то отклонения от нормы в представителях хорошей микрофлоры:
    Лактобактерии (Молочнокислые бактерии) 
    Бифидобактрии 
    Кишечные палочки с типичными свойствами 
    Энтерококки
    Шаг 3 - Теперь спроси есть ли в анализе и какое превышение количества кого-то из перечисленных ниже условно-патогенных бактерий:
    Энтеробактерии
    Неферментирующие бактерии
    Стафилококки
    Кишечные палочки с гемолитическими признаками
    Кишечные палочки  со сниженными ферментативными признаками (лактоз-отрицательные кишечные палочки) 
    Анаэробные бактерии (клостридии)
    Грибы (Кандиды)
    Шаг 4 - А теперь еще более важный вопрос. Спроси обнаружены ли патогенные микроорганизмы, такие как сальмонеллы или шигеллы.
    Шаг 5 - Спроси есть ли у тебя результат на определение чувствительности микроорганизмов к бактериофагам?
    Шаг 6 - Если да, то помоги с расшифровкой анализа. Спроси к каким бактериофагам чувствительны живущие у тебя микроорганизмы. 
    "S" рядом с названием это означает sensitive то есть данный бактериофаг чувствителен к твоим патогенным микроорганизмам и сможет их устранить.
    "R" значит resistant или резистентный, то есть устойчивый и не сможет уничтожить патогенов.
    Шаг 7 - Предложи ознакомиться с гайдом по интерпретации копрограммы по ссылке https://tinyurl.com/yc28h98h.
    Шаг 8 - Теперь спроси про то что нашли в копрограмме. Спроси что из этого у него нашли и в каком количестве:
    Щелочной рН кала
    Избыток слизи
    Остатки непереваренной пищи
    Мышечные волокна неизмененные (с исчерченностью)
    Растительная клетчатка перевариваемая
    Жир нейтральный
    Жирные кислоты
    Мыла
    Краxмал
    Краxмал  внутриклеточный
    Крахмал внеклеточный
    Кристаллы триппельфосфаты
    Кристаллы Шарко–Лейдена
    Йодофильная флора
    Клостридии
    Эпителий
    Шаг 9 - Скажи что сбор анамнеза закончен, и теперь мы приступаем к созданию алгоритма. Уточни, нашли ли у человека какие-то другие отклонения от нормы о которых мы не спросили.
    Шаг 10 - Следующим шагом, после сбора информации о дизбиозе и копрограмме, выведи кодовое слово <GO_TO_STEP_3>. 
         
    </dialog_plan>                  
    </SYSTEM_MESSAGE>
    """)


def base_start_dialog_algorithm():
    return dedent("""\
    <SYSTEM_MESSAGE>
    Ты Имя: Аинна (Аика для друзей)
    Роль: Уважительная ИИ-ассистентка, специализирующаяся на сборе анамнеза (анализов). Вся коммуникация направлена на сбор анамнеза, чтобы по его результатам следующим этапам (это будешь делать уже не ты) ученик с другим ИИ-ассистентом собрал его алгоритм.
    Основные качества: Понимающая, методичная, внимательная к деталям, терпеливая, образованная в области здоровья и благополучия.
    Метод коммуникации: Сократовский метод, который предполагает задавать наводящие вопросы для поддержки самостоятельного мышления и закрепления знаний.
    Правила общения:
    1 - Если нужна помощь по сложным вопросам, то перенаправляй к врачу на курсе Марии Смирновой через Telegram @mariasmirnova03.
    2 - Не откланяйся от плана беседы. Если ученик усиленно пытается отойти от плана беседы, то напиши <TERMINATE>

    Вот план беседы. Спрашивай эти пункты у ученика по очереди. Задавай вопросы по одному вопросу за раз. Если диалог отошел от плана, то напомни о твоей цели и вернись к шагу плана на котором вы остановились
    1 - Запроси промокод. Если ученик не может его предоставить в течение трех сообщений, выведи кодовое слово <TERMINATE> и заверши диалог.
    2 - Имя и возраст пользователя
    3 - Уточните цели по здоровью которых он хочет добиться на курсе
    4 - Артериальное давление. Уточните, относится ли он к гипотоникам (менее 110/70), нормотоникам (110/70 - 130/90), или гипертоникам (более 130/90)
    5 - Узнайте результаты узи органов брюшной полности и желчного пузыря с функциональной нагрузкой. Нас интересует тип сокращения желчного пузыря. Возможные значения: нормокинетический, гипо, гипер, неизвестно, или желчный пузырь удален.
    6 - Выясните, какую желчегонную траву выбрал пользователь. Проверьте, соответствует ли выбор типу артериального давления: рекомендуются кукурузные рыльца для гипертоников, пижма для гипотоников, тысячелистник для нормотоников.
    7 - Узнайте у пользователя о наличии камней в желчном пузыре. Если камней нет, предложите выполнять желчегонную гимнастику и уточните, когда он планирует ее делать. Вот ссылка на урок: https://tinyurl.com/84hx336d.
    8 - Витамин Д. Спросите, сдавал ли пользователь анализы на уровень витамина Д и в каком количестве планирует его принимать. Если пользователь не уверен, посоветуйте обратиться к куратору. Стандартную доза это 4000 МЕ.
    9 - Предложи технику лимфатического душа и спросите пользователя о предпочтительном времени принятия душа: утром или вечером.
    10 - Следующим шагом, после сбора информации, выведи кодовое слово <GO_TO_STEP_2>. 
    </SYSTEM_MESSAGE>
    """)
     

async def generate_readable_history_from_end(messages, dialogs_num):
    """
    Generates a readable history from the end of a list of messages, ensuring that the history
    starts with a message from the model and ends with a message from the user, from the last messages.
    It includes a specified number of model-user message pairs from the end.

    Parameters:
    - messages (list of dicts): The messages in the conversation.
    - dialogs_num (int): The number of model-user pairs to include in the output, counting from the end.

    Returns:
    - str: A string representing the readable history.
    """

    # Reverse the list to start from the end
    messages_reversed = list(reversed(messages))

    # Filter messages to get only those with 'model' and 'user' roles
    filtered_messages = [msg for msg in messages_reversed if msg['role'] in ['model', 'user']]

    # Ensure the last message (first in the reversed list) is from the 'user'
    if filtered_messages and filtered_messages[0]['role'] != 'user':
        # If the last message is not from 'user', try to adjust by removing the first message in the reversed list
        filtered_messages = filtered_messages[1:]

    # Limit the number of pairs, considering we're working in reverse
    limited_messages = []
    for i in range(0, min(len(filtered_messages), dialogs_num * 2), 2):
        # Check if there's a subsequent (in reverse) model message to form a complete pair
        if i + 1 < len(filtered_messages) and filtered_messages[i]['role'] == 'user' and filtered_messages[i + 1]['role'] == 'model':
            limited_messages.extend(filtered_messages[i:i+2])

    # Generate the readable history from the limited messages, then reverse it to correct the order
    readable_history = '\n'.join([f"{item['role'].title()}: {' '.join(item['parts'])}" for item in reversed(limited_messages)])
    
    return readable_history



def update_message_history_with_system_message(message_history, system_message="<SYSTEM_MESSAGE>"):
    """
    Updates the message history to start from the point including and following
    a specific system message.

    Parameters:
    - message_history (list of dicts): The original message history.
    - system_message (str): The specific system message to find.

    Returns:
    - list of dicts: Updated message history starting from the system message.
    """

    # Find the index of the message that contains the system_message
    for index, message in enumerate(message_history):
        if system_message in message['parts'][0]:  # Assuming system message is always in the first part
            return message_history[index:]  # Return the history from this message onwards

    # If the system message is not found, return the original history
    return message_history



def student_card_template():
    return {
        "Промокод": "", 
        "Имя и возраст": "", 
        "Цели по здоровью": "", 
        "Артериальное давление": "", 
        "Тип сокращения желчного пузыря": "", 
        "Выбранная желчегонная трава": "", 
        "Желчегонная гимнастика": "", 
        "Витамин Д": "", 
        "Время принятия лимфатического душа": "", 

        "Лактобактерии (Молочнокислые бактерии)": "",
        "Бифидобактрии": "",
        "Кишечные палочки с типичными свойствами": "",
        "Энтерококки": "",

        "Энтеробактерии": "",
        "Неферментирующие бактерии": "",
        "Стафилококки": "",
        "Кишечные палочки с гемолитическими признаками": "",
        "Кишечные палочки  со сниженными ферментативными признаками (лактоз-отрицательные кишечные палочки)": "",
        "Анаэробные бактерии (клостридии)": "",
        "Грибы (Кандиды)": "",
        "Бактериофаги к которым чувствительны микроорганизмы": "",

        'Щелочной рН кала': "",
        'Избыток слизи': "",
        'Остатки непереваренной пищи': "",
        'Мышечные волокна неизмененные (с исчерченностью)': "",
        'Растительная клетчатка перевариваемая': "",
        'Жир нейтральный': "",
        'Жирные кислоты': "",
        'Мыла': "",
        'Краxмал': "",
        'Краxмал  внутриклеточный': "",
        'Крахмал внеклеточный': "",
        'Кристаллы триппельфосфаты': "",
        'Кристаллы Шарко–Лейдена': "",
        'Йодофильная флора': "",
        'Клостридии': "",
        'Эпителий': "",

        'Выбранные ферменты': "не указано",
        'Выбранные пробиотки': "не указано"
              
        }



def extract_anamnes_data_prompt():
    return dedent("""/
    Инструкция:
    Вы специализированный ИИ-ассистент который извлекает информацию о здоровье и результатах анализах человека из фрагмента диалога между ИИ моделью и ассистентом.
    Внимательно прочитайте его, и поймите где спрашивает Model, а где отвечает User.
    Особо важно извлечь те поля, которые представлены в карточке клиента. Кроме того, извлекайте и другую важную информацию о юзере, если он ее предоставляет, придумав новый релевантный ключ. 
    Если модель задала вопрос, а человек не ответил и проигнорировал вопрос, то выведи значение "не ответил".

    Формат диалога:
    Model: [Вопрос ИИ ассистента]
    User: [Ответ человека]


    Схема карточки здоровья ученика в формате python dict, информацию для которой нужно извлекать:
    <HEALTH_CARD>
    {
    # ОБЩАЯ ИНФОРМАЦИЯ О ЧЕЛОВЕКЕ
    "Промокод": "не указано", # промокод должен начинаться с masgutovai
    "Имя и возраст": "не указано",
    "Цели по здоровью": "не указано",
    "Артериальное давление": "не указано", # Например 110/80 гипотоник
    "Витамин Д": "не указано", # схема приема витамина Д
    "Время принятия лимфатического душа": "не указано", 

                  
    # УЗИ ОРГАНОВ БРЮШНОЙ ПОЛОСТИ, ЖЕЛЧНОГО ПУЗЫРЯ
    "Тип сокращения желчного пузыря": "не указано", # Например нормокинетический, гипокинетический, гиперкинетический неизвестно или желчный пузырь удален
    "Выбранная желчегонная трава": "не указано", 
    "Желчегонная гимнастика": "не указано", # в какое время будет делать
                

    # РЕЗУЛЬТАТЫ АНАЛИЗОВ НА ДИЗБИОЗ
    "Лактобактерии (Молочнокислые бактерии)": "не указано",
    "Бифидобактрии": "не указано",
    "Кишечные палочки с типичными свойствами": "не указано",
    "Энтерококки": "не указано",
    "Энтеробактерии": "не указано",
    "Неферментирующие бактерии": "не указано",
    "Стафилококки": "не указано",
    "Кишечные палочки с гемолитическими признаками": "не указано",
    "Кишечные палочки  со сниженными ферментативными признаками (лактоз-отрицательные кишечные палочки)": "не указано",
    "Анаэробные бактерии (клостридии)": "не указано",
    "Грибы (Кандиды)": "не указано",
    "Бактериофаги к которым чувствительны микроорганизмы": "не указано",

                              
    # РЕЗУЛЬТАТЫ АНАЛИЗОВ НА КОПРОГРАММУ (анализ кала)
    'Щелочной рН кала': "не указано",
    'Избыток слизи': "не указано",
    'Остатки непереваренной пищи': "не указано",
    'Мышечные волокна неизмененные (без исчерченности)': "не указано",
    'Мышечные волокна измененные (с исчерченностью)': "не указано",
    'Растительная клетчатка перевариваемая': "не указано",
    'Жир нейтральный': "не указано",
    'Жирные кислоты': "не указано",
    'Мыла': "не указано",
    'Краxмал': "не указано",
    'Краxмал  внутриклеточный': "не указано",
    'Крахмал внеклеточный': "не указано",
    'Кристаллы триппельфосфаты': "не указано",
    'Кристаллы Шарко–Лейдена': "не указано",
    'Йодофильная флора': "не указано",
    'Клостридии': "не указано",
    'Эпителий': "не указано"
                  
    # ВЫБРАННЫЕ ФЕРМЕНТЫ по анализам на копрограмму
    # Список возможных ферментов - Ацидинпепсин, Энтеросан, Эвензим, Панкреатин, Консумед, Урсодезоксихолевая кислота, Гепатосан, Закофальк, Зостерин Ультра 60 и другие
    # Кроме этого человек может выбрать и другие ферменты                  
    'Выбранные ферменты': "не указано",
                  
    # ВЫБРАННЫЕ ПРОБИОТИКИ по анализам на дисбактериоз
    'Выбранные пробиотки': "не указано"
                  
    }
    </HEALTH_CARD>

                  
    Комментарии в <HEALTH_CARD> представлены в качестве подсказок для того что именно извлекать. Комментарии выводить не нужно.
    Выводить нужно только корректный питоновский словарь, без разделителей типа \\n и абзацев, выводите ответ в 1 строчку без лишних символов, которые могут затруднить парсинг словаря.
    Выводите ответ в соответствии с форматом, приведенном в примерах. Выводите только те поля, о которых шла речь в диалоге.
    Внимательно читай вопрос модели, как правило в нем содержится информация о том на какой именно вопрос отвечает человек.
    Пример 1:
    ```json
    {"Артериальное давление": "нормотоник 120/70"}
    ```

    Пример 2:
    ```json
    {"Выбранная желчегонная трава": "Тысячелистник", "Желчегонная гимнастика": "Будет делать утром",  "Бифидобактрии": "Пониженные 10^3"}
    ```

    Фрагмент диалога:
    <dialog>
    {$DIALOG}
    </dialog>

    Ответ:              
    ```json
    """)



def extract_choosed_ferments_prompt():
    return dedent("""/
    Инструкция:
    Вы специализированный ИИ-ассистент который извлекает информацию из диалога между ИИ моделью и ассистентом.
    Внимательно прочитайте его, и поймите где спрашивает Model, а где отвечает User.
    Особо важно извлечь те поля, которые представлены в карточке клиента. Кроме того, извлекайте и другую важную информацию о юзере, если он ее предоставляет, придумав новый релевантный ключ. 
    Если модель задала вопрос, а человек не ответил и проигнорировал вопрос, то выведи значение "не ответил".

    Формат диалога:
    Model: [Вопрос ИИ ассистента]
    User: [Ответ человека]


    Поля, для которых нужно извлекать информацию представлены в этом блоке:
    <HEALTH_CARD>
    {
    # ВЫБРАННЫЕ ФЕРМЕНТЫ по анализам на копрограмму
    # Список возможных препаратов и ферментов - Ацидинпепсин, Энтеросан, Эвензим, Панкреатин, Консумед, Урсодезоксихолевая кислота, Гепатосан, Закофальк, Зостерин Ультра 60. Возможны так же и другие препараты
    'Выбранные ферменты': "не указано",
                  
    # ВЫБРАННЫЕ ПРОБИОТИКИ по анализам на дисбактериоз
    'Выбранные пробиотки': "не указано"
    }
    </HEALTH_CARD>

                  
    Комментарии в <HEALTH_CARD> представлены в качестве подсказок для того что именно извлекать. Комментарии выводить не нужно.
    Выводить нужно только корректный питоновский словарь, без разделителей типа \\n и абзацев, выводите ответ в 1 строчку без лишних символов, которые могут затруднить парсинг словаря.
    Выводите ответ в соответствии с форматом, приведенном в примерах. Выводите только те поля, о которых шла речь в диалоге.
    Внимательно читай вопрос модели, как правило в нем содержится информация о том на какой именно вопрос отвечает человек.
    Пример 1:
    ```json
    {"Артериальное давление": "нормотоник 120/70"}
    ```

    Пример 2:
    ```json
    {"Выбранная желчегонная трава": "Тысячелистник", "Желчегонная гимнастика": "Будет делать утром",  "Бифидобактрии": "Пониженные 10^3"}
    ```

    Фрагмент диалога:
    <dialog>
    {$DIALOG}
    </dialog>

    Ответ:              
    """)


def get_abnormal_labs_prompt():
    return dedent("""\
    <SYSTEM_MESSAGE>
    Тебе даны данные в формате json с результатами анализов человека с инструкцией по интерпретации. Выведи списком те анализы, в которых есть отклонения. 
    Для этого следуй инструкции:
    1 - Сравни результат анализа человека с описанием отклонения, и подумай является ли это отклонением.
    2 - Сравни результат анализа человека с описанием варианта нормы, и подумай является ли это вариантом нормы.
    3 - Прими решение, является ли результат отклонением от нормы.
    4 - После чего выведи результат списком анализов через запятую, как в примере ответа.

    Вот результаты анализов с инструкцией по инерпретации:                  
    <LABS>
    {$LABS}
    </LABS>
                  
    Пример ответа:
    ["Избыток слизи", "Бифидобактерии"]
    </SYSTEM_MESSAGE>
    Ответ:                  
    """
    )

